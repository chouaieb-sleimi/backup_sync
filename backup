#!/usr/bin/env bash
#set -xv

###################
## Variables

log_success="success_backup.log"
log_error="error_backup.log"
backup_conf="$HOME/.backup_config"

###################
## Functions

display_help() {
    echo "This script backs up files in 2 modes, \"full\" and \"lite\". Files defined in \$exclusion_file var are excluded. The rsync tool to perform the backup."
    echo "Backup successes and errors are logged to \$log_success and \$log_error files under the backup device."
    echo
    echo "Usage: backup [type]"
    echo "  Backup types:"
    echo "  - full"
    echo "  - lite"
    echo
}

display_usage() {
    echo "Usage: backup [type]"
    echo "  Backup types:"
    echo "  - full"
    echo "  - lite"
    echo
}

read_variables() {
    if [[ $operation == "full" ]]; then
        source $backup_conf/backupfull_vars
    elif [[ $operation == "lite" ]]; then
        source $backup_conf/backuplite_vars
    fi
}

backup() {
    # clean previous timestamp
    if [[ $(find $device_path/ -maxdepth 1 -name "timestamp*") ]]; then
        rm $device_path/timestamp*
    fi

    # write new timestamp
    timestamp=$(date +%Y-%m-%d_%H%M%S)
    cat >$device_path/timestamp.$timestamp <<EOF
=======================================
= backup performed at $timestamp
=======================================
EOF
    unset timestamp

    # backup repo list
    rsync -av --inplace \
        --delete \
        --chown=chouaieb:chouaieb \
        /etc/yum.repos.d $device_path/

    # backup package list
    rpm -qa >$device_path/package_list

    # backup env files
    for file in ${env_files[@]}; do
        rsync -av --inplace \
            --delete \
            $file $device_path/
    done

    # backup vs code's extension list
    code --list-extensions >$device_path/code_extensions

    # backup src_folder
    rsync -av --inplace \
        --delete --delete-excluded \
        --exclude-from=$exclusion_file \
        $src_folder/ $dest_folder/ \
        > >(tee $device_path/$log_success) \
        2> >(tee $device_path/$log_error)
}

analyse_backup_results() {
    if [[ -f $device_path/$log_error && -f $device_path/$log_success ]]; then
        success_count=$(wc -l $device_path/$log_success | cut -d" " -f1)
        success_count=$(($success_count - 4))
        errors_count=$(wc -l $device_path/$log_error | cut -d" " -f1)

        echo
        echo "- $success_count successful operations"
        echo "- $errors_count errors occured"

        if [[ $errors_count -gt 0 ]]; then
            read -p "Review errors? [Y/n] " read_errors
            read_errors=${read_errors:-y}
            if [[ $read_errors == "y" ]]; then
                less $device_path/$log_error
            fi
        fi
    fi
}

main() {
    if [[ $# -eq 0 ]]; then
        display_help
        exit 0

    elif [[ $# -eq 1 ]]; then
        operation=$1
        if [[ $operation != "full" && $operation != "lite" ]]; then
            echo "[ERROR] Arguments error"
            display_usage
            exit 1
        else
            read_variables
        fi
    fi

    if [[ -d $device_path ]]; then
        if [[ ! -d "$dest_folder" ]]; then
            mkdir -p "$dest_folder"
        fi

        backup
        analyse_backup_results
        exit 0
    else
        echo "Backup device \"$device_name\" not found"
        exit 1
    fi
}

###################
## Script start

if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
    main $@
fi
