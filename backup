#!/usr/bin/env bash
#set -xv

###################
## Variables

log_success="success_backup.log"
log_error="error_backup.log"
backup_conf="$HOME/.backup_config"

###################
## Functions

display_usage() {
    echo "Usage: backup [-h] [-p PROFILE]"
}

display_help() {
    display_usage
    echo
    echo "This script backs up files based on different backup profiles. Each backup profile has one backup source and destination folders and multiple environment files outside the source and destination folders."
    echo
    echo "Each backup profile uses 2 variable files under the folder defined in \$backup_conf variable; \"backup_[PROFILE]_vars\" and \"backup_[PROFILE]_exclusion\"."
    echo "\"backup_[PROFILE]_vars\" is a shell script that defines variables specific to each backup profile. \"backup_[PROFILE]_exclusion\" file defines files and/or folders that are excluded from the backup source."
    echo
    echo "backup_[PROFILE]_vars example:"
    echo "    src_folder=\$HOME"
    echo "    env_files=(/etc/hosts)"
    echo "    device_path=/run/media/dave/backupUSB"
    echo "    dest_folder=\$device_path/homeBackup"
    echo
}

exit_error() {
    display_usage
    exit 1
}

main() {
    # when called with no argument
    [[ $@ == "" ]] && display_help && exit 0

    # only allow POSIX arguments
    [[ $(echo "$@" | grep -vE "^(-.( [a-z]+)?)$") ]] && exit_error

    while getopts :p:h option; do
        case $option in
        p)
            profile=$OPTARG
            read_variables

            [[ ! -d $src_folder ]] && echo "Source folder $src_folder not found" && exit_error
            [[ ! -d $device_path ]] && echo "Backup device \"$device_name\" not found" && exit_error
            [[ ! -d "$dest_folder" ]] && mkdir -p "$dest_folder"

            backup
            analyse_backup_results
            exit 0
            ;;
        h)
            display_help
            ;;
        :)
            [[ $OPTARG == "p" ]] && echo "ERROR | PROFILE required"
            exit_error
            ;;
        ?)
            echo "ERROR | unkown option -$OPTARG"
            exit_error
            ;;
        *)
            echo "ERROR | invalid operation $*"
            exit_error
            ;;
        esac
    done
}

read_variables() {
    # read exclusion_file
    exclusion_file="$backup_conf/backup_${profile}_exclusion"
    [[ ! -f $exclusion_file ]] && echo "ERROR | $exclusion_file file doesn't exist" && error="true"

    # read vars_file
    vars_file="$backup_conf/backup_${profile}_vars"
    [[ ! -f $vars_file ]] && echo "ERROR | $vars_file file doesn't exist" && error="true"

    [[ -n $error ]] && exit 1 || source $vars_file
}

backup() {
    # clean previous timestamp
    [[ $(find $device_path/ -maxdepth 1 -name "timestamp*") ]] && rm $device_path/timestamp*

    # write new timestamp
    timestamp=$(date +%Y-%m-%d_%H%M%S)
    cat >$device_path/timestamp.$timestamp <<EOF
=======================================
= backup performed at $timestamp
=======================================
EOF
    unset timestamp

    backup_env_files

    # backup src_folder
    rsync -av --inplace \
        --delete --delete-excluded \
        --exclude-from=$exclusion_file \
        $src_folder/ $dest_folder/ \
        > >(tee $device_path/$log_success) \
        2> >(tee $device_path/$log_error)
}

backup_env_files() {
    env_files_dest="$device_path/env_files"
    # create $env_files_dest dir
    [[ ! -d $env_files_dest ]] && mkdir $env_files_dest

    # backup repo list
    rsync -av --inplace \
        --delete \
        --chown=chouaieb:chouaieb \
        /etc/yum.repos.d $env_files_dest/

    # backup package list
    rpm -qa >$env_files_dest/package_list

    # backup env files
    for file in ${env_files[@]}; do
        rsync -av --inplace \
            --delete \
            $file $env_files_dest/
    done

    # backup vs code's extension list
    code --list-extensions --profile $vscode_profile >$env_files_dest/code_extensions
}

analyse_backup_results() {
    if [[ -f $device_path/$log_error && -f $device_path/$log_success ]]; then
        success_count=$(wc -l $device_path/$log_success | cut -d" " -f1)
        success_count=$(($success_count - 4))
        errors_count=$(wc -l $device_path/$log_error | cut -d" " -f1)

        echo
        echo "- $success_count successful operations"
        echo "- $errors_count errors occured"

        if [[ $errors_count -gt 0 ]]; then
            read -p "Review errors? [Y/n] " read_errors
            read_errors=${read_errors:-y}

            [[ $read_errors == "y" ]] && less $device_path/$log_error
        fi
    fi
}

###################
## Script start

[[ "${BASH_SOURCE[0]}" == "$0" ]] && main $@
